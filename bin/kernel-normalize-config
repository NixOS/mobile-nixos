#!/usr/bin/env nix-shell
#!nix-shell -p ruby -i ruby

# This script is expected to be used to copy back the `kernel-builder` built
# linux configuration to the kernel's source directory.
#
# Use this to normalize the configuration after:
#
#  - Changing configuration options
#  - Changing the kernel version

require "shellwords"
ROOT = File.join(__dir__, "..")

def usage()
  puts "Usage: bin/kernel-normalize-config <device_name> [kernel variant name]"
end

# Poor approximation to arguments parsing.
params, other_args = ARGV.partition { |s| s.match(/^--/) }

if other_args.empty?
  $stderr.puts "Device name required."
  usage
  exit 1
end

DEVICE = other_args.shift
VARIANT =
  unless other_args.empty?
    other_args.shift
  else
    nil
  end

VARIANT_DIRNAME = ["kernel", VARIANT].compact.join("-")
KERNEL_DIR = File.join(Dir.pwd, "devices", DEVICE, VARIANT_DIRNAME)
KCONF_FILE = Dir.glob(File.join(KERNEL_DIR, "config.*")).sort.first

unless params.empty?
  $stderr.puts "Unknown parameters #{params.join(", ")}."
  usage
  exit 1
end

unless other_args.empty?
  $stderr.puts "Unexpected arguments #{other_args.join(", ")}."
  usage
  exit 1
end

unless KCONF_FILE
  $stderr.puts "Could not find kernel configuration file for #{DEVICE}."
  variants = Dir.glob(File.join(Dir.pwd, "devices", DEVICE, "kernel-*"))
  if variants.length > 0
    $stderr.puts
    $stderr.puts "Variants detected for #{DEVICE}:"
    variants.each do |dir|
      $stderr.puts " - #{File.basename(dir).sub(/^kernel-/, "")}"
    end
  end
  $stderr.puts
  usage
  exit 1
end

arg =
  # Is the device a path?
  if DEVICE.match(%r{/})
    ["--arg", "device", DEVICE]
  else
    ["--argstr", "device", DEVICE]
  end

if VARIANT
  arg << "--arg"
  arg << "configuration"
  arg << <<~EOF
  { lib, ... }:

  {
    mobile.boot.stage-1.kernel.provenance = lib.mkForce "#{VARIANT}";
  }
  EOF
end

Dir.chdir(ROOT) do
  result = `#{[
    "nix-build",
    "--show-trace",
    "--no-out-link",
    *arg,
    "-A", "config.mobile.boot.stage-1.kernel.package.normalizedConfig"
  ].shelljoin}`.strip

  # We "cat" into the file to ensure we don't copy the store path access rights.
  File.write(KCONF_FILE, File.read(result))
end

# vim: ft=ruby
